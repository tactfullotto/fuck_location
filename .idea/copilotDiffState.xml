<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/xposedgpshook/GpsHook.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/xposedgpshook/GpsHook.kt" />
              <option name="originalContent" value="package com.example.xposedgpshook&#10;&#10;import android.content.Context&#10;import android.location.Location&#10;import android.location.LocationListener&#10;import android.location.LocationManager&#10;import android.os.Bundle&#10;import android.os.SystemClock&#10;import de.robv.android.xposed.IXposedHookLoadPackage&#10;import de.robv.android.xposed.XC_MethodHook&#10;import de.robv.android.xposed.XposedBridge&#10;import de.robv.android.xposed.XposedHelpers&#10;import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam&#10;import java.util.Random&#10;&#10;class GpsHook : IXposedHookLoadPackage {&#10;&#10;    // 默认位置 (北京故宫)&#10;    private val defaultLatitude = 39.916345&#10;    private val defaultLongitude = 116.397155&#10;&#10;    private val targetPackages = setOf(&#10;        &quot;com.google.android.apps.maps&quot;, // 谷歌地图&#10;        &quot;com.baidu.BaiduMap&quot;,           // 百度地图&#10;        &quot;com.autonavi.minimap&quot;,         // 高德地图&#10;        &quot;com.tencent.map&quot;,              // 腾讯地图&#10;        &quot;com.tencent.qqminimap&quot;,        // 腾讯地图（轻量版）&#10;        &quot;com.sougou.map.android.maps&quot;   // 搜狗地图&#10;    )&#10;&#10;    override fun handleLoadPackage(lpparam: LoadPackageParam) {&#10;        // 只对目标地图应用生效&#10;        if (lpparam.packageName !in targetPackages) {&#10;            return&#10;        }&#10;&#10;        XposedBridge.log(&quot;GpsHook: Loaded app: ${lpparam.packageName}&quot;)&#10;&#10;        // 检查是否启用了 Hook&#10;        if (!isHookEnabled()) {&#10;            XposedBridge.log(&quot;GpsHook: Hook is disabled by user, skipping...&quot;)&#10;            return&#10;        }&#10;&#10;        hookLocationManager(lpparam.classLoader)&#10;        hookWifiManager(lpparam.classLoader)&#10;        hookTelephonyManager(lpparam.classLoader)&#10;    }&#10;&#10;    /**&#10;     * 检查用户是否启用了 Hook&#10;     */&#10;    private fun isHookEnabled(): Boolean {&#10;        return try {&#10;            val prefsPath = &quot;/data/data/com.example.xposedgpshook/shared_prefs/gps_hook_prefs.xml&quot;&#10;            val prefsFile = java.io.File(prefsPath)&#10;&#10;            if (prefsFile.exists() &amp;&amp; prefsFile.canRead()) {&#10;                val content = prefsFile.readText()&#10;                val pattern = &quot;&lt;boolean name=\&quot;hook_enabled\&quot; value=\&quot;([^\&quot;]+)\&quot;&quot;.toRegex()&#10;                val matchResult = pattern.find(content)&#10;                val enabled = matchResult?.groupValues?.get(1)?.toBoolean() ?: true&#10;                XposedBridge.log(&quot;GpsHook: Hook enabled status: $enabled&quot;)&#10;                enabled&#10;            } else {&#10;                XposedBridge.log(&quot;GpsHook: Config file not found, assuming enabled&quot;)&#10;                true&#10;            }&#10;        } catch (e: Throwable) {&#10;            XposedBridge.log(&quot;GpsHook: Failed to read hook enabled status, assuming enabled&quot;)&#10;            XposedBridge.log(e)&#10;            true&#10;        }&#10;    }&#10;&#10;    private fun hookLocationManager(classLoader: ClassLoader) {&#10;        try {&#10;            val locationManagerClass = XposedHelpers.findClass(&#10;                &quot;android.location.LocationManager&quot;,&#10;                classLoader&#10;            )&#10;&#10;            // 1. Hook requestLocationUpdates 方法（带 LocationListener 参数）&#10;            XposedHelpers.findAndHookMethod(&#10;                locationManagerClass,&#10;                &quot;requestLocationUpdates&quot;,&#10;                String::class.java,      // provider&#10;                Long::class.javaPrimitiveType,        // minTime&#10;                Float::class.javaPrimitiveType,       // minDistance&#10;                LocationListener::class.java, // listener&#10;                object : XC_MethodHook() {&#10;                    override fun beforeHookedMethod(param: MethodHookParam) {&#10;                        val originalListener = param.args[3] as? LocationListener ?: return&#10;&#10;                        // 创建一个我们自己的监听器代理&#10;                        val hookedListener = object : LocationListener {&#10;                            override fun onLocationChanged(location: Location) {&#10;                                XposedBridge.log(&quot;GpsHook: onLocationChanged intercepted!&quot;)&#10;                                val fakeLocation = createFakeLocation(param.thisObject as LocationManager)&#10;                                // 调用原始监听器的方法，但传入的是我们的虚假位置&#10;                                originalListener.onLocationChanged(fakeLocation)&#10;                            }&#10;&#10;                            override fun onStatusChanged(provider: String?, status: Int, extras: Bundle?) {&#10;                                originalListener.onStatusChanged(provider, status, extras)&#10;                            }&#10;&#10;                            override fun onProviderEnabled(provider: String) {&#10;                                originalListener.onProviderEnabled(provider)&#10;                            }&#10;&#10;                            override fun onProviderDisabled(provider: String) {&#10;                                originalListener.onProviderDisabled(provider)&#10;                            }&#10;                        }&#10;                        // 将原始的监听器替换为我们的代理&#10;                        param.args[3] = hookedListener&#10;                        XposedBridge.log(&quot;GpsHook: requestLocationUpdates hooked for ${param.args[0]}&quot;)&#10;                    }&#10;                }&#10;            )&#10;&#10;            // 2. Hook requestLocationUpdates 方法（带 Looper 参数）&#10;            try {&#10;                XposedHelpers.findAndHookMethod(&#10;                    locationManagerClass,&#10;                    &quot;requestLocationUpdates&quot;,&#10;                    String::class.java,      // provider&#10;                    Long::class.javaPrimitiveType,        // minTime&#10;                    Float::class.javaPrimitiveType,       // minDistance&#10;                    LocationListener::class.java, // listener&#10;                    android.os.Looper::class.java, // looper&#10;                    object : XC_MethodHook() {&#10;                        override fun beforeHookedMethod(param: MethodHookParam) {&#10;                            val originalListener = param.args[3] as? LocationListener ?: return&#10;&#10;                            val hookedListener = object : LocationListener {&#10;                                override fun onLocationChanged(location: Location) {&#10;                                    XposedBridge.log(&quot;GpsHook: onLocationChanged (with Looper) intercepted!&quot;)&#10;                                    originalListener.onLocationChanged(createFakeLocation(param.thisObject as LocationManager))&#10;                                }&#10;&#10;                                override fun onStatusChanged(provider: String?, status: Int, extras: Bundle?) {&#10;                                    originalListener.onStatusChanged(provider, status, extras)&#10;                                }&#10;&#10;                                override fun onProviderEnabled(provider: String) {&#10;                                    originalListener.onProviderEnabled(provider)&#10;                                }&#10;&#10;                                override fun onProviderDisabled(provider: String) {&#10;                                    originalListener.onProviderDisabled(provider)&#10;                                }&#10;                            }&#10;                            param.args[3] = hookedListener&#10;                        }&#10;                    }&#10;                )&#10;            } catch (e: Throwable) {&#10;                XposedBridge.log(&quot;GpsHook: requestLocationUpdates (with Looper) not found or failed&quot;)&#10;            }&#10;&#10;            // 3. Hook getLastKnownLocation 方法&#10;            XposedHelpers.findAndHookMethod(&#10;                locationManagerClass,&#10;                &quot;getLastKnownLocation&quot;,&#10;                String::class.java, // provider&#10;                object : XC_MethodHook() {&#10;                    override fun afterHookedMethod(param: MethodHookParam) {&#10;                        XposedBridge.log(&quot;GpsHook: getLastKnownLocation intercepted for ${param.args[0]}&quot;)&#10;                        // 直接返回我们的虚假位置&#10;                        param.result = createFakeLocation(param.thisObject as LocationManager)&#10;                    }&#10;                }&#10;            )&#10;&#10;            // 4. Hook getCurrentLocation 方法（Android 11+）&#10;            try {&#10;                XposedHelpers.findAndHookMethod(&#10;                    locationManagerClass,&#10;                    &quot;getCurrentLocation&quot;,&#10;                    String::class.java, // provider&#10;                    android.os.CancellationSignal::class.java, // cancellationSignal&#10;                    java.util.concurrent.Executor::class.java, // executor&#10;                    java.util.function.Consumer::class.java, // consumer&#10;                    object : XC_MethodHook() {&#10;                        override fun beforeHookedMethod(param: MethodHookParam) {&#10;                            val originalConsumer = param.args[3] as? java.util.function.Consumer&lt;Location&gt; ?: return&#10;&#10;                            val hookedConsumer = java.util.function.Consumer&lt;Location&gt; { location -&gt;&#10;                                XposedBridge.log(&quot;GpsHook: getCurrentLocation intercepted!&quot;)&#10;                                originalConsumer.accept(createFakeLocation(param.thisObject as LocationManager))&#10;                            }&#10;                            param.args[3] = hookedConsumer&#10;                        }&#10;                    }&#10;                )&#10;            } catch (e: Throwable) {&#10;                XposedBridge.log(&quot;GpsHook: getCurrentLocation not found (requires Android 11+)&quot;)&#10;            }&#10;&#10;            // 5. Hook Location 类的 getLatitude 和 getLongitude 方法&#10;            try {&#10;                val locationClass = XposedHelpers.findClass(&quot;android.location.Location&quot;, classLoader)&#10;&#10;                XposedHelpers.findAndHookMethod(&#10;                    locationClass,&#10;                    &quot;getLatitude&quot;,&#10;                    object : XC_MethodHook() {&#10;                        override fun afterHookedMethod(param: MethodHookParam) {&#10;                            val location = param.thisObject as Location&#10;                            val context = getContextFromLocation(location)&#10;                            val coords = getUserSettings(context)&#10;                            param.result = coords.first&#10;                        }&#10;                    }&#10;                )&#10;&#10;                XposedHelpers.findAndHookMethod(&#10;                    locationClass,&#10;                    &quot;getLongitude&quot;,&#10;                    object : XC_MethodHook() {&#10;                        override fun afterHookedMethod(param: MethodHookParam) {&#10;                            val location = param.thisObject as Location&#10;                            val context = getContextFromLocation(location)&#10;                            val coords = getUserSettings(context)&#10;                            param.result = coords.second&#10;                        }&#10;                    }&#10;                )&#10;&#10;                XposedBridge.log(&quot;GpsHook: Location.getLatitude/getLongitude hooked&quot;)&#10;            } catch (e: Throwable) {&#10;                XposedBridge.log(&quot;GpsHook: Failed to hook Location class methods&quot;)&#10;                XposedBridge.log(e)&#10;            }&#10;&#10;            XposedBridge.log(&quot;GpsHook: Successfully hooked LocationManager.&quot;)&#10;&#10;        } catch (e: Throwable) {&#10;            XposedBridge.log(&quot;GpsHook: Failed to hook LocationManager.&quot;)&#10;            XposedBridge.log(e)&#10;        }&#10;    }&#10;&#10;    private fun hookWifiManager(classLoader: ClassLoader) {&#10;        try {&#10;            val wifiManagerClass = XposedHelpers.findClass(&quot;android.net.wifi.WifiManager&quot;, classLoader)&#10;&#10;            // Hook getScanResults 方法&#10;            XposedHelpers.findAndHookMethod(&#10;                wifiManagerClass,&#10;                &quot;getScanResults&quot;,&#10;                object : XC_MethodHook() {&#10;                    override fun afterHookedMethod(param: MethodHookParam) {&#10;                        param.result = createFakeWifiScanResults()&#10;                        XposedBridge.log(&quot;GpsHook: Faked WiFi scan results.&quot;)&#10;                    }&#10;                }&#10;            )&#10;&#10;            XposedBridge.log(&quot;GpsHook: Successfully hooked WifiManager.&quot;)&#10;        } catch (e: Throwable) {&#10;            XposedBridge.log(&quot;GpsHook: Failed to hook WifiManager.&quot;)&#10;            XposedBridge.log(e)&#10;        }&#10;    }&#10;&#10;    private fun hookTelephonyManager(classLoader: ClassLoader) {&#10;        try {&#10;            val telephonyManagerClass = XposedHelpers.findClass(&quot;android.telephony.TelephonyManager&quot;, classLoader)&#10;&#10;            // Hook getAllCellInfo (for modern apps)&#10;            XposedHelpers.findAndHookMethod(&#10;                telephonyManagerClass,&#10;                &quot;getAllCellInfo&quot;,&#10;                object : XC_MethodHook() {&#10;                    override fun afterHookedMethod(param: MethodHookParam) {&#10;                        val context = getContextFromTelephonyManager(param.thisObject as android.telephony.TelephonyManager)&#10;                        param.result = createFakeCellInfo(context)&#10;                        XposedBridge.log(&quot;GpsHook: Faked getAllCellInfo.&quot;)&#10;                    }&#10;                }&#10;            )&#10;&#10;            // Hook getCellLocation (for older apps)&#10;            XposedHelpers.findAndHookMethod(&#10;                telephonyManagerClass,&#10;                &quot;getCellLocation&quot;,&#10;                object : XC_MethodHook() {&#10;                    override fun afterHookedMethod(param: MethodHookParam) {&#10;                        param.result = createFakeCellLocation()&#10;                        XposedBridge.log(&quot;GpsHook: Faked getCellLocation.&quot;)&#10;                    }&#10;                }&#10;            )&#10;&#10;            // Hook getNeighboringCellInfo (旧版 API，百度地图可能使用)&#10;            try {&#10;                XposedHelpers.findAndHookMethod(&#10;                    telephonyManagerClass,&#10;                    &quot;getNeighboringCellInfo&quot;,&#10;                    object : XC_MethodHook() {&#10;                        override fun afterHookedMethod(param: MethodHookParam) {&#10;                            param.result = createFakeNeighboringCellInfo()&#10;                            XposedBridge.log(&quot;GpsHook: Faked getNeighboringCellInfo.&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            } catch (e: Throwable) {&#10;                XposedBridge.log(&quot;GpsHook: getNeighboringCellInfo not found or failed&quot;)&#10;            }&#10;&#10;            // Hook getServiceState (服务状态)&#10;            try {&#10;                XposedHelpers.findAndHookMethod(&#10;                    telephonyManagerClass,&#10;                    &quot;getServiceState&quot;,&#10;                    object : XC_MethodHook() {&#10;                        override fun afterHookedMethod(param: MethodHookParam) {&#10;                            // 返回正常的服务状态，表示信号良好&#10;                            XposedBridge.log(&quot;GpsHook: getServiceState intercepted.&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            } catch (e: Throwable) {&#10;                XposedBridge.log(&quot;GpsHook: getServiceState not found or failed&quot;)&#10;            }&#10;&#10;            XposedBridge.log(&quot;GpsHook: Successfully hooked TelephonyManager.&quot;)&#10;        } catch (e: Throwable) {&#10;            XposedBridge.log(&quot;GpsHook: Failed to hook TelephonyManager.&quot;)&#10;            XposedBridge.log(e)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 从 TelephonyManager 获取 Context&#10;     */&#10;    private fun getContextFromTelephonyManager(telephonyManager: android.telephony.TelephonyManager): Context? {&#10;        return try {&#10;            val contextField = XposedHelpers.findField(telephonyManager.javaClass, &quot;mContext&quot;)&#10;            contextField.get(telephonyManager) as? Context&#10;        } catch (e: Throwable) {&#10;            null&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 从 LocationManager 获取 Context&#10;     */&#10;    private fun getContextFromLocationManager(locationManager: LocationManager): Context? {&#10;        return try {&#10;            val contextField = XposedHelpers.findField(locationManager.javaClass, &quot;mContext&quot;)&#10;            contextField.get(locationManager) as? Context&#10;        } catch (e: Throwable) {&#10;            null&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 从 Location 获取 Context (尝试多种方法)&#10;     */&#10;    private fun getContextFromLocation(location: Location): Context? {&#10;        return null // Location 对象本身不包含 Context，这里返回 null&#10;    }&#10;&#10;    /**&#10;     * 获取用户设置的坐标&#10;     */&#10;    private fun getUserSettings(context: Context?): Pair&lt;Double, Double&gt; {&#10;        return try {&#10;            if (context != null) {&#10;                // 直接读取配置应用的 SharedPreferences 文件&#10;                val prefsPath = &quot;/data/data/com.example.xposedgpshook/shared_prefs/gps_hook_prefs.xml&quot;&#10;                val prefsFile = java.io.File(prefsPath)&#10;&#10;                if (prefsFile.exists() &amp;&amp; prefsFile.canRead()) {&#10;                    // 解析 XML 文件读取配置&#10;                    val content = prefsFile.readText()&#10;                    val latitude = extractFloatValue(content, &quot;fake_latitude&quot;) ?: defaultLatitude.toFloat()&#10;                    val longitude = extractFloatValue(content, &quot;fake_longitude&quot;) ?: defaultLongitude.toFloat()&#10;&#10;                    XposedBridge.log(&quot;GpsHook: Using custom location: $latitude, $longitude&quot;)&#10;                    Pair(latitude.toDouble(), longitude.toDouble())&#10;                } else {&#10;                    XposedBridge.log(&quot;GpsHook: Config file not found or not readable, using default location&quot;)&#10;                    Pair(defaultLatitude, defaultLongitude)&#10;                }&#10;            } else {&#10;                XposedBridge.log(&quot;GpsHook: Context is null, using default location&quot;)&#10;                Pair(defaultLatitude, defaultLongitude)&#10;            }&#10;        } catch (e: Throwable) {&#10;            XposedBridge.log(&quot;GpsHook: Failed to read settings, using default location&quot;)&#10;            XposedBridge.log(e)&#10;            Pair(defaultLatitude, defaultLongitude)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 从 XML 内容中提取 float 值&#10;     */&#10;    private fun extractFloatValue(xml: String, key: String): Float? {&#10;        return try {&#10;            val pattern = &quot;&lt;float name=\&quot;$key\&quot; value=\&quot;([^\&quot;]+)\&quot;&quot;.toRegex()&#10;            val matchResult = pattern.find(xml)&#10;            matchResult?.groupValues?.get(1)?.toFloat()&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 创建一个虚假的 WiFi 扫描结果列表&#10;     */&#10;    private fun createFakeWifiScanResults(): List&lt;Any&gt; {&#10;        val fakeResults = mutableListOf&lt;Any&gt;()&#10;        val random = Random()&#10;        val numResults = 10 + random.nextInt(10) // 生成 10-19 个结果&#10;&#10;        for (i in 1..numResults) {&#10;            try {&#10;                val scanResultClass = XposedHelpers.findClass(&quot;android.net.wifi.ScanResult&quot;, null)&#10;                val scanResult = scanResultClass.newInstance()&#10;&#10;                // 生成随机 BSSID (MAC 地址)&#10;                val bssid = String.format(&#10;                    &quot;%02x:%02x:%02x:%02x:%02x:%02x&quot;,&#10;                    random.nextInt(256),&#10;                    random.nextInt(256),&#10;                    random.nextInt(256),&#10;                    random.nextInt(256),&#10;                    random.nextInt(256),&#10;                    random.nextInt(256)&#10;                )&#10;&#10;                XposedHelpers.setObjectField(scanResult, &quot;SSID&quot;, &quot;FakeWiFi_$i&quot;)&#10;                XposedHelpers.setObjectField(scanResult, &quot;BSSID&quot;, bssid)&#10;                XposedHelpers.setObjectField(scanResult, &quot;capabilities&quot;, &quot;[WPA2-PSK-CCMP]&quot;)&#10;                XposedHelpers.setObjectField(scanResult, &quot;level&quot;, -30 - random.nextInt(60)) // 信号强度 -30 to -89 dBm&#10;                XposedHelpers.setObjectField(scanResult, &quot;frequency&quot;, if (i % 2 == 0) 2450 else 5200) // 2.4GHz or 5GHz&#10;                XposedHelpers.setObjectField(scanResult, &quot;timestamp&quot;, System.currentTimeMillis() * 1000)&#10;&#10;                fakeResults.add(scanResult)&#10;            } catch (e: Throwable) {&#10;                XposedBridge.log(&quot;GpsHook: Failed to create a fake ScanResult object.&quot;)&#10;                XposedBridge.log(e)&#10;            }&#10;        }&#10;        return fakeResults&#10;    }&#10;&#10;    /**&#10;     * 创建一个虚假的 CellInfo 列表&#10;     */&#10;    private fun createFakeCellInfo(context: Context?): List&lt;Any&gt; {&#10;        val fakeCellInfos = mutableListOf&lt;Any&gt;()&#10;        val random = Random()&#10;        val numCells = 2 + random.nextInt(2) // 2-3 个基站&#10;&#10;        val (baseLatitude, baseLongitude) = getUserSettings(context)&#10;&#10;        for (i in 1..numCells) {&#10;            try {&#10;                val cellInfoLteClass = XposedHelpers.findClass(&quot;android.telephony.CellInfoLte&quot;, null)&#10;                val cellIdentityLteClass = XposedHelpers.findClass(&quot;android.telephony.CellIdentityLte&quot;, null)&#10;                val cellSignalStrengthLteClass = XposedHelpers.findClass(&quot;android.telephony.CellSignalStrengthLte&quot;, null)&#10;&#10;                val cellIdentity = cellIdentityLteClass.newInstance()&#10;                XposedHelpers.setIntField(cellIdentity, &quot;mMcc&quot;, 460) // MCC for China&#10;                XposedHelpers.setIntField(cellIdentity, &quot;mMnc&quot;, 0)   // MNC for China Mobile&#10;                XposedHelpers.setIntField(cellIdentity, &quot;mCi&quot;, random.nextInt(65535))&#10;                XposedHelpers.setIntField(cellIdentity, &quot;mPci&quot;, random.nextInt(504))&#10;                XposedHelpers.setIntField(cellIdentity, &quot;mTac&quot;, random.nextInt(65535)) // Tracking Area Code&#10;&#10;                val cellSignalStrength = cellSignalStrengthLteClass.newInstance()&#10;                XposedHelpers.setIntField(cellSignalStrength, &quot;mSignalStrength&quot;, random.nextInt(31) + 2) // ASU level 2-31&#10;                XposedHelpers.setIntField(cellSignalStrength, &quot;mRsrp&quot;, -110 + random.nextInt(30)) // RSRP&#10;                XposedHelpers.setIntField(cellSignalStrength, &quot;mRsrq&quot;, -15 + random.nextInt(10))  // RSRQ&#10;                XposedHelpers.setIntField(cellSignalStrength, &quot;mRssnr&quot;, random.nextInt(200))&#10;                XposedHelpers.setIntField(cellSignalStrength, &quot;mCqi&quot;, random.nextInt(15))&#10;                XposedHelpers.setIntField(cellSignalStrength, &quot;mTimingAdvance&quot;, random.nextInt(1282))&#10;&#10;                val cellInfo = cellInfoLteClass.newInstance()&#10;                XposedHelpers.setBooleanField(cellInfo, &quot;mRegistered&quot;, i == 1) // 第一个设为已注册&#10;                XposedHelpers.setObjectField(cellInfo, &quot;mCellIdentity&quot;, cellIdentity)&#10;                XposedHelpers.setObjectField(cellInfo, &quot;mCellSignalStrength&quot;, cellSignalStrength)&#10;&#10;                fakeCellInfos.add(cellInfo)&#10;            } catch (e: Throwable) {&#10;                XposedBridge.log(&quot;GpsHook: Failed to create a fake CellInfoLte object.&quot;)&#10;                XposedBridge.log(e)&#10;            }&#10;        }&#10;        return fakeCellInfos&#10;    }&#10;&#10;    /**&#10;     * 创建一个虚假的 GsmCellLocation&#10;     */&#10;    private fun createFakeCellLocation(): Any {&#10;        val gsmCellLocationClass = XposedHelpers.findClass(&quot;android.telephony.gsm.GsmCellLocation&quot;, null)&#10;        val gsmCellLocation = gsmCellLocationClass.newInstance()&#10;        val random = Random()&#10;        XposedHelpers.callMethod(gsmCellLocation, &quot;setLacAndCid&quot;, random.nextInt(65535), random.nextInt(65535))&#10;        return gsmCellLocation&#10;    }&#10;&#10;    /**&#10;     * 创建虚假的邻近基站信息列表（旧版 API）&#10;     */&#10;    private fun createFakeNeighboringCellInfo(): List&lt;Any&gt; {&#10;        val fakeNeighboringCells = mutableListOf&lt;Any&gt;()&#10;        val random = Random()&#10;        val numCells = 2 + random.nextInt(2) // 2-3 个邻近基站&#10;&#10;        try {&#10;            val neighboringCellInfoClass = XposedHelpers.findClass(&quot;android.telephony.NeighboringCellInfo&quot;, null)&#10;&#10;            for (i in 1..numCells) {&#10;                val constructor = neighboringCellInfoClass.getConstructor(&#10;                    Int::class.javaPrimitiveType,&#10;                    Int::class.javaPrimitiveType&#10;                )&#10;                val rssi = -110 + random.nextInt(30) // 信号强度&#10;                val cid = random.nextInt(65535) // Cell ID&#10;                val neighboringCell = constructor.newInstance(rssi, cid)&#10;                fakeNeighboringCells.add(neighboringCell)&#10;            }&#10;        } catch (e: Throwable) {&#10;            XposedBridge.log(&quot;GpsHook: Failed to create fake NeighboringCellInfo.&quot;)&#10;            XposedBridge.log(e)&#10;        }&#10;&#10;        return fakeNeighboringCells&#10;    }&#10;&#10;    /**&#10;     * 创建一个虚假的 Location 对象&#10;     */&#10;    private fun createFakeLocation(locationManager: LocationManager): Location {&#10;        val context = getContextFromLocationManager(locationManager)&#10;        val coords = getUserSettings(context)&#10;&#10;        val location = Location(LocationManager.GPS_PROVIDER)&#10;        location.latitude = coords.first&#10;        location.longitude = coords.second&#10;        location.accuracy = 10.0f // 精度（米）&#10;        location.altitude = 50.0 // 海拔（米）&#10;        location.bearing = 0f // 方向&#10;        location.speed = 0f // 速度（米/秒）&#10;        location.time = System.currentTimeMillis()&#10;        // for API 17+&#10;        location.elapsedRealtimeNanos = SystemClock.elapsedRealtimeNanos()&#10;        return location&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.xposedgpshook&#10;&#10;import android.content.Context&#10;import android.location.Location&#10;import android.location.LocationListener&#10;import android.location.LocationManager&#10;import android.os.Bundle&#10;import android.os.SystemClock&#10;import de.robv.android.xposed.IXposedHookLoadPackage&#10;import de.robv.android.xposed.XC_MethodHook&#10;import de.robv.android.xposed.XposedBridge&#10;import de.robv.android.xposed.XposedHelpers&#10;import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam&#10;import java.util.Random&#10;&#10;class GpsHook : IXposedHookLoadPackage {&#10;&#10;    // 默认位置 (北京故宫)&#10;    private val defaultLatitude = 39.916345&#10;    private val defaultLongitude = 116.397155&#10;&#10;    // 系统进程和定位服务进程&#10;    private val systemPackages = setOf(&#10;        &quot;android&quot;,                      // 系统进程&#10;        &quot;com.android.location.fused&quot;,   // 融合定位服务&#10;        &quot;com.google.android.gms&quot;        // Google Play Services (包含定位服务)&#10;    )&#10;&#10;    override fun handleLoadPackage(lpparam: LoadPackageParam) {&#10;        // 只 Hook 系统进程和定位服务&#10;        if (lpparam.packageName !in systemPackages) {&#10;            return&#10;        }&#10;&#10;        XposedBridge.log(&quot;GpsHook: Loaded system/location service: ${lpparam.packageName}&quot;)&#10;&#10;        // 检查是否启用了 Hook&#10;        if (!isHookEnabled()) {&#10;            XposedBridge.log(&quot;GpsHook: Hook is disabled by user, skipping...&quot;)&#10;            return&#10;        }&#10;&#10;        hookLocationManager(lpparam.classLoader)&#10;        hookWifiManager(lpparam.classLoader)&#10;        hookTelephonyManager(lpparam.classLoader)&#10;        &#10;        // Hook 系统的 LocationManagerService&#10;        if (lpparam.packageName == &quot;android&quot;) {&#10;            hookLocationManagerService(lpparam.classLoader)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 检查用户是否启用了 Hook&#10;     */&#10;    private fun isHookEnabled(): Boolean {&#10;        return try {&#10;            val prefsPath = &quot;/data/data/com.example.xposedgpshook/shared_prefs/gps_hook_prefs.xml&quot;&#10;            val prefsFile = java.io.File(prefsPath)&#10;&#10;            if (prefsFile.exists() &amp;&amp; prefsFile.canRead()) {&#10;                val content = prefsFile.readText()&#10;                val pattern = &quot;&lt;boolean name=\&quot;hook_enabled\&quot; value=\&quot;([^\&quot;]+)\&quot;&quot;.toRegex()&#10;                val matchResult = pattern.find(content)&#10;                val enabled = matchResult?.groupValues?.get(1)?.toBoolean() ?: true&#10;                XposedBridge.log(&quot;GpsHook: Hook enabled status: $enabled&quot;)&#10;                enabled&#10;            } else {&#10;                XposedBridge.log(&quot;GpsHook: Config file not found, assuming enabled&quot;)&#10;                true&#10;            }&#10;        } catch (e: Throwable) {&#10;            XposedBridge.log(&quot;GpsHook: Failed to read hook enabled status, assuming enabled&quot;)&#10;            XposedBridge.log(e)&#10;            true&#10;        }&#10;    }&#10;&#10;    private fun hookLocationManager(classLoader: ClassLoader) {&#10;        try {&#10;            val locationManagerClass = XposedHelpers.findClass(&#10;                &quot;android.location.LocationManager&quot;,&#10;                classLoader&#10;            )&#10;&#10;            // 1. Hook requestLocationUpdates 方法（带 LocationListener 参数）&#10;            XposedHelpers.findAndHookMethod(&#10;                locationManagerClass,&#10;                &quot;requestLocationUpdates&quot;,&#10;                String::class.java,      // provider&#10;                Long::class.javaPrimitiveType,        // minTime&#10;                Float::class.javaPrimitiveType,       // minDistance&#10;                LocationListener::class.java, // listener&#10;                object : XC_MethodHook() {&#10;                    override fun beforeHookedMethod(param: MethodHookParam) {&#10;                        val originalListener = param.args[3] as? LocationListener ?: return&#10;&#10;                        // 创建一个我们自己的监听器代理&#10;                        val hookedListener = object : LocationListener {&#10;                            override fun onLocationChanged(location: Location) {&#10;                                XposedBridge.log(&quot;GpsHook: onLocationChanged intercepted!&quot;)&#10;                                val fakeLocation = createFakeLocation(param.thisObject as LocationManager)&#10;                                // 调用原始监听器的方法，但传入的是我们的虚假位置&#10;                                originalListener.onLocationChanged(fakeLocation)&#10;                            }&#10;&#10;                            override fun onStatusChanged(provider: String?, status: Int, extras: Bundle?) {&#10;                                originalListener.onStatusChanged(provider, status, extras)&#10;                            }&#10;&#10;                            override fun onProviderEnabled(provider: String) {&#10;                                originalListener.onProviderEnabled(provider)&#10;                            }&#10;&#10;                            override fun onProviderDisabled(provider: String) {&#10;                                originalListener.onProviderDisabled(provider)&#10;                            }&#10;                        }&#10;                        // 将原始的监听器替换为我们的代理&#10;                        param.args[3] = hookedListener&#10;                        XposedBridge.log(&quot;GpsHook: requestLocationUpdates hooked for ${param.args[0]}&quot;)&#10;                    }&#10;                }&#10;            )&#10;&#10;            // 2. Hook requestLocationUpdates 方法（带 Looper 参数）&#10;            try {&#10;                XposedHelpers.findAndHookMethod(&#10;                    locationManagerClass,&#10;                    &quot;requestLocationUpdates&quot;,&#10;                    String::class.java,      // provider&#10;                    Long::class.javaPrimitiveType,        // minTime&#10;                    Float::class.javaPrimitiveType,       // minDistance&#10;                    LocationListener::class.java, // listener&#10;                    android.os.Looper::class.java, // looper&#10;                    object : XC_MethodHook() {&#10;                        override fun beforeHookedMethod(param: MethodHookParam) {&#10;                            val originalListener = param.args[3] as? LocationListener ?: return&#10;&#10;                            val hookedListener = object : LocationListener {&#10;                                override fun onLocationChanged(location: Location) {&#10;                                    XposedBridge.log(&quot;GpsHook: onLocationChanged (with Looper) intercepted!&quot;)&#10;                                    originalListener.onLocationChanged(createFakeLocation(param.thisObject as LocationManager))&#10;                                }&#10;&#10;                                override fun onStatusChanged(provider: String?, status: Int, extras: Bundle?) {&#10;                                    originalListener.onStatusChanged(provider, status, extras)&#10;                                }&#10;&#10;                                override fun onProviderEnabled(provider: String) {&#10;                                    originalListener.onProviderEnabled(provider)&#10;                                }&#10;&#10;                                override fun onProviderDisabled(provider: String) {&#10;                                    originalListener.onProviderDisabled(provider)&#10;                                }&#10;                            }&#10;                            param.args[3] = hookedListener&#10;                        }&#10;                    }&#10;                )&#10;            } catch (e: Throwable) {&#10;                XposedBridge.log(&quot;GpsHook: requestLocationUpdates (with Looper) not found or failed&quot;)&#10;            }&#10;&#10;            // 3. Hook getLastKnownLocation 方法&#10;            XposedHelpers.findAndHookMethod(&#10;                locationManagerClass,&#10;                &quot;getLastKnownLocation&quot;,&#10;                String::class.java, // provider&#10;                object : XC_MethodHook() {&#10;                    override fun afterHookedMethod(param: MethodHookParam) {&#10;                        XposedBridge.log(&quot;GpsHook: getLastKnownLocation intercepted for ${param.args[0]}&quot;)&#10;                        // 直接返回我们的虚假位置&#10;                        param.result = createFakeLocation(param.thisObject as LocationManager)&#10;                    }&#10;                }&#10;            )&#10;&#10;            // 4. Hook getCurrentLocation 方法（Android 11+）&#10;            try {&#10;                XposedHelpers.findAndHookMethod(&#10;                    locationManagerClass,&#10;                    &quot;getCurrentLocation&quot;,&#10;                    String::class.java, // provider&#10;                    android.os.CancellationSignal::class.java, // cancellationSignal&#10;                    java.util.concurrent.Executor::class.java, // executor&#10;                    java.util.function.Consumer::class.java, // consumer&#10;                    object : XC_MethodHook() {&#10;                        override fun beforeHookedMethod(param: MethodHookParam) {&#10;                            val originalConsumer = param.args[3] as? java.util.function.Consumer&lt;Location&gt; ?: return&#10;&#10;                            val hookedConsumer = java.util.function.Consumer&lt;Location&gt; { location -&gt;&#10;                                XposedBridge.log(&quot;GpsHook: getCurrentLocation intercepted!&quot;)&#10;                                originalConsumer.accept(createFakeLocation(param.thisObject as LocationManager))&#10;                            }&#10;                            param.args[3] = hookedConsumer&#10;                        }&#10;                    }&#10;                )&#10;            } catch (e: Throwable) {&#10;                XposedBridge.log(&quot;GpsHook: getCurrentLocation not found (requires Android 11+)&quot;)&#10;            }&#10;&#10;            // 5. Hook Location 类的 getLatitude 和 getLongitude 方法&#10;            try {&#10;                val locationClass = XposedHelpers.findClass(&quot;android.location.Location&quot;, classLoader)&#10;&#10;                XposedHelpers.findAndHookMethod(&#10;                    locationClass,&#10;                    &quot;getLatitude&quot;,&#10;                    object : XC_MethodHook() {&#10;                        override fun afterHookedMethod(param: MethodHookParam) {&#10;                            val location = param.thisObject as Location&#10;                            val context = getContextFromLocation(location)&#10;                            val coords = getUserSettings(context)&#10;                            param.result = coords.first&#10;                        }&#10;                    }&#10;                )&#10;&#10;                XposedHelpers.findAndHookMethod(&#10;                    locationClass,&#10;                    &quot;getLongitude&quot;,&#10;                    object : XC_MethodHook() {&#10;                        override fun afterHookedMethod(param: MethodHookParam) {&#10;                            val location = param.thisObject as Location&#10;                            val context = getContextFromLocation(location)&#10;                            val coords = getUserSettings(context)&#10;                            param.result = coords.second&#10;                        }&#10;                    }&#10;                )&#10;&#10;                XposedBridge.log(&quot;GpsHook: Location.getLatitude/getLongitude hooked&quot;)&#10;            } catch (e: Throwable) {&#10;                XposedBridge.log(&quot;GpsHook: Failed to hook Location class methods&quot;)&#10;                XposedBridge.log(e)&#10;            }&#10;&#10;            XposedBridge.log(&quot;GpsHook: Successfully hooked LocationManager.&quot;)&#10;&#10;        } catch (e: Throwable) {&#10;            XposedBridge.log(&quot;GpsHook: Failed to hook LocationManager.&quot;)&#10;            XposedBridge.log(e)&#10;        }&#10;    }&#10;&#10;    private fun hookWifiManager(classLoader: ClassLoader) {&#10;        try {&#10;            val wifiManagerClass = XposedHelpers.findClass(&quot;android.net.wifi.WifiManager&quot;, classLoader)&#10;&#10;            // Hook getScanResults 方法&#10;            XposedHelpers.findAndHookMethod(&#10;                wifiManagerClass,&#10;                &quot;getScanResults&quot;,&#10;                object : XC_MethodHook() {&#10;                    override fun afterHookedMethod(param: MethodHookParam) {&#10;                        param.result = createFakeWifiScanResults()&#10;                        XposedBridge.log(&quot;GpsHook: Faked WiFi scan results.&quot;)&#10;                    }&#10;                }&#10;            )&#10;&#10;            XposedBridge.log(&quot;GpsHook: Successfully hooked WifiManager.&quot;)&#10;        } catch (e: Throwable) {&#10;            XposedBridge.log(&quot;GpsHook: Failed to hook WifiManager.&quot;)&#10;            XposedBridge.log(e)&#10;        }&#10;    }&#10;&#10;    private fun hookTelephonyManager(classLoader: ClassLoader) {&#10;        try {&#10;            val telephonyManagerClass = XposedHelpers.findClass(&quot;android.telephony.TelephonyManager&quot;, classLoader)&#10;&#10;            // Hook getAllCellInfo (for modern apps)&#10;            XposedHelpers.findAndHookMethod(&#10;                telephonyManagerClass,&#10;                &quot;getAllCellInfo&quot;,&#10;                object : XC_MethodHook() {&#10;                    override fun afterHookedMethod(param: MethodHookParam) {&#10;                        val context = getContextFromTelephonyManager(param.thisObject as android.telephony.TelephonyManager)&#10;                        param.result = createFakeCellInfo(context)&#10;                        XposedBridge.log(&quot;GpsHook: Faked getAllCellInfo.&quot;)&#10;                    }&#10;                }&#10;            )&#10;&#10;            // Hook getCellLocation (for older apps)&#10;            XposedHelpers.findAndHookMethod(&#10;                telephonyManagerClass,&#10;                &quot;getCellLocation&quot;,&#10;                object : XC_MethodHook() {&#10;                    override fun afterHookedMethod(param: MethodHookParam) {&#10;                        param.result = createFakeCellLocation()&#10;                        XposedBridge.log(&quot;GpsHook: Faked getCellLocation.&quot;)&#10;                    }&#10;                }&#10;            )&#10;&#10;            // Hook getNeighboringCellInfo (旧版 API，百度地图可能使用)&#10;            try {&#10;                XposedHelpers.findAndHookMethod(&#10;                    telephonyManagerClass,&#10;                    &quot;getNeighboringCellInfo&quot;,&#10;                    object : XC_MethodHook() {&#10;                        override fun afterHookedMethod(param: MethodHookParam) {&#10;                            param.result = createFakeNeighboringCellInfo()&#10;                            XposedBridge.log(&quot;GpsHook: Faked getNeighboringCellInfo.&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            } catch (e: Throwable) {&#10;                XposedBridge.log(&quot;GpsHook: getNeighboringCellInfo not found or failed&quot;)&#10;            }&#10;&#10;            // Hook getServiceState (服务状态)&#10;            try {&#10;                XposedHelpers.findAndHookMethod(&#10;                    telephonyManagerClass,&#10;                    &quot;getServiceState&quot;,&#10;                    object : XC_MethodHook() {&#10;                        override fun afterHookedMethod(param: MethodHookParam) {&#10;                            // 返回正常的服务状态，表示信号良好&#10;                            XposedBridge.log(&quot;GpsHook: getServiceState intercepted.&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            } catch (e: Throwable) {&#10;                XposedBridge.log(&quot;GpsHook: getServiceState not found or failed&quot;)&#10;            }&#10;&#10;            XposedBridge.log(&quot;GpsHook: Successfully hooked TelephonyManager.&quot;)&#10;        } catch (e: Throwable) {&#10;            XposedBridge.log(&quot;GpsHook: Failed to hook TelephonyManager.&quot;)&#10;            XposedBridge.log(e)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 从 TelephonyManager 获取 Context&#10;     */&#10;    private fun getContextFromTelephonyManager(telephonyManager: android.telephony.TelephonyManager): Context? {&#10;        return try {&#10;            val contextField = XposedHelpers.findField(telephonyManager.javaClass, &quot;mContext&quot;)&#10;            contextField.get(telephonyManager) as? Context&#10;        } catch (e: Throwable) {&#10;            null&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 从 LocationManager 获取 Context&#10;     */&#10;    private fun getContextFromLocationManager(locationManager: LocationManager): Context? {&#10;        return try {&#10;            val contextField = XposedHelpers.findField(locationManager.javaClass, &quot;mContext&quot;)&#10;            contextField.get(locationManager) as? Context&#10;        } catch (e: Throwable) {&#10;            null&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 从 Location 获取 Context (尝试多种方法)&#10;     */&#10;    private fun getContextFromLocation(location: Location): Context? {&#10;        return null // Location 对象本身不包含 Context，这里返回 null&#10;    }&#10;&#10;    /**&#10;     * 获取用户设置的坐标&#10;     */&#10;    private fun getUserSettings(context: Context?): Pair&lt;Double, Double&gt; {&#10;        return try {&#10;            if (context != null) {&#10;                // 直接读取配置应用的 SharedPreferences 文件&#10;                val prefsPath = &quot;/data/data/com.example.xposedgpshook/shared_prefs/gps_hook_prefs.xml&quot;&#10;                val prefsFile = java.io.File(prefsPath)&#10;&#10;                if (prefsFile.exists() &amp;&amp; prefsFile.canRead()) {&#10;                    // 解析 XML 文件读取配置&#10;                    val content = prefsFile.readText()&#10;                    val latitude = extractFloatValue(content, &quot;fake_latitude&quot;) ?: defaultLatitude.toFloat()&#10;                    val longitude = extractFloatValue(content, &quot;fake_longitude&quot;) ?: defaultLongitude.toFloat()&#10;&#10;                    XposedBridge.log(&quot;GpsHook: Using custom location: $latitude, $longitude&quot;)&#10;                    Pair(latitude.toDouble(), longitude.toDouble())&#10;                } else {&#10;                    XposedBridge.log(&quot;GpsHook: Config file not found or not readable, using default location&quot;)&#10;                    Pair(defaultLatitude, defaultLongitude)&#10;                }&#10;            } else {&#10;                XposedBridge.log(&quot;GpsHook: Context is null, using default location&quot;)&#10;                Pair(defaultLatitude, defaultLongitude)&#10;            }&#10;        } catch (e: Throwable) {&#10;            XposedBridge.log(&quot;GpsHook: Failed to read settings, using default location&quot;)&#10;            XposedBridge.log(e)&#10;            Pair(defaultLatitude, defaultLongitude)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 从 XML 内容中提取 float 值&#10;     */&#10;    private fun extractFloatValue(xml: String, key: String): Float? {&#10;        return try {&#10;            val pattern = &quot;&lt;float name=\&quot;$key\&quot; value=\&quot;([^\&quot;]+)\&quot;&quot;.toRegex()&#10;            val matchResult = pattern.find(xml)&#10;            matchResult?.groupValues?.get(1)?.toFloat()&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 创建一个虚假的 WiFi 扫描结果列表&#10;     */&#10;    private fun createFakeWifiScanResults(): List&lt;Any&gt; {&#10;        val fakeResults = mutableListOf&lt;Any&gt;()&#10;        val random = Random()&#10;        val numResults = 10 + random.nextInt(10) // 生成 10-19 个结果&#10;&#10;        for (i in 1..numResults) {&#10;            try {&#10;                val scanResultClass = XposedHelpers.findClass(&quot;android.net.wifi.ScanResult&quot;, null)&#10;                val scanResult = scanResultClass.newInstance()&#10;&#10;                // 生成随机 BSSID (MAC 地址)&#10;                val bssid = String.format(&#10;                    &quot;%02x:%02x:%02x:%02x:%02x:%02x&quot;,&#10;                    random.nextInt(256),&#10;                    random.nextInt(256),&#10;                    random.nextInt(256),&#10;                    random.nextInt(256),&#10;                    random.nextInt(256),&#10;                    random.nextInt(256)&#10;                )&#10;&#10;                XposedHelpers.setObjectField(scanResult, &quot;SSID&quot;, &quot;FakeWiFi_$i&quot;)&#10;                XposedHelpers.setObjectField(scanResult, &quot;BSSID&quot;, bssid)&#10;                XposedHelpers.setObjectField(scanResult, &quot;capabilities&quot;, &quot;[WPA2-PSK-CCMP]&quot;)&#10;                XposedHelpers.setObjectField(scanResult, &quot;level&quot;, -30 - random.nextInt(60)) // 信号强度 -30 to -89 dBm&#10;                XposedHelpers.setObjectField(scanResult, &quot;frequency&quot;, if (i % 2 == 0) 2450 else 5200) // 2.4GHz or 5GHz&#10;                XposedHelpers.setObjectField(scanResult, &quot;timestamp&quot;, System.currentTimeMillis() * 1000)&#10;&#10;                fakeResults.add(scanResult)&#10;            } catch (e: Throwable) {&#10;                XposedBridge.log(&quot;GpsHook: Failed to create a fake ScanResult object.&quot;)&#10;                XposedBridge.log(e)&#10;            }&#10;        }&#10;        return fakeResults&#10;    }&#10;&#10;    /**&#10;     * 创建一个虚假的 CellInfo 列表&#10;     */&#10;    private fun createFakeCellInfo(context: Context?): List&lt;Any&gt; {&#10;        val fakeCellInfos = mutableListOf&lt;Any&gt;()&#10;        val random = Random()&#10;        val numCells = 2 + random.nextInt(2) // 2-3 个基站&#10;&#10;        val (baseLatitude, baseLongitude) = getUserSettings(context)&#10;&#10;        for (i in 1..numCells) {&#10;            try {&#10;                val cellInfoLteClass = XposedHelpers.findClass(&quot;android.telephony.CellInfoLte&quot;, null)&#10;                val cellIdentityLteClass = XposedHelpers.findClass(&quot;android.telephony.CellIdentityLte&quot;, null)&#10;                val cellSignalStrengthLteClass = XposedHelpers.findClass(&quot;android.telephony.CellSignalStrengthLte&quot;, null)&#10;&#10;                val cellIdentity = cellIdentityLteClass.newInstance()&#10;                XposedHelpers.setIntField(cellIdentity, &quot;mMcc&quot;, 460) // MCC for China&#10;                XposedHelpers.setIntField(cellIdentity, &quot;mMnc&quot;, 0)   // MNC for China Mobile&#10;                XposedHelpers.setIntField(cellIdentity, &quot;mCi&quot;, random.nextInt(65535))&#10;                XposedHelpers.setIntField(cellIdentity, &quot;mPci&quot;, random.nextInt(504))&#10;                XposedHelpers.setIntField(cellIdentity, &quot;mTac&quot;, random.nextInt(65535)) // Tracking Area Code&#10;&#10;                val cellSignalStrength = cellSignalStrengthLteClass.newInstance()&#10;                XposedHelpers.setIntField(cellSignalStrength, &quot;mSignalStrength&quot;, random.nextInt(31) + 2) // ASU level 2-31&#10;                XposedHelpers.setIntField(cellSignalStrength, &quot;mRsrp&quot;, -110 + random.nextInt(30)) // RSRP&#10;                XposedHelpers.setIntField(cellSignalStrength, &quot;mRsrq&quot;, -15 + random.nextInt(10))  // RSRQ&#10;                XposedHelpers.setIntField(cellSignalStrength, &quot;mRssnr&quot;, random.nextInt(200))&#10;                XposedHelpers.setIntField(cellSignalStrength, &quot;mCqi&quot;, random.nextInt(15))&#10;                XposedHelpers.setIntField(cellSignalStrength, &quot;mTimingAdvance&quot;, random.nextInt(1282))&#10;&#10;                val cellInfo = cellInfoLteClass.newInstance()&#10;                XposedHelpers.setBooleanField(cellInfo, &quot;mRegistered&quot;, i == 1) // 第一个设为已注册&#10;                XposedHelpers.setObjectField(cellInfo, &quot;mCellIdentity&quot;, cellIdentity)&#10;                XposedHelpers.setObjectField(cellInfo, &quot;mCellSignalStrength&quot;, cellSignalStrength)&#10;&#10;                fakeCellInfos.add(cellInfo)&#10;            } catch (e: Throwable) {&#10;                XposedBridge.log(&quot;GpsHook: Failed to create a fake CellInfoLte object.&quot;)&#10;                XposedBridge.log(e)&#10;            }&#10;        }&#10;        return fakeCellInfos&#10;    }&#10;&#10;    /**&#10;     * 创建一个虚假的 GsmCellLocation&#10;     */&#10;    private fun createFakeCellLocation(): Any {&#10;        val gsmCellLocationClass = XposedHelpers.findClass(&quot;android.telephony.gsm.GsmCellLocation&quot;, null)&#10;        val gsmCellLocation = gsmCellLocationClass.newInstance()&#10;        val random = Random()&#10;        XposedHelpers.callMethod(gsmCellLocation, &quot;setLacAndCid&quot;, random.nextInt(65535), random.nextInt(65535))&#10;        return gsmCellLocation&#10;    }&#10;&#10;    /**&#10;     * 创建虚假的邻近基站信息列表（旧版 API）&#10;     */&#10;    private fun createFakeNeighboringCellInfo(): List&lt;Any&gt; {&#10;        val fakeNeighboringCells = mutableListOf&lt;Any&gt;()&#10;        val random = Random()&#10;        val numCells = 2 + random.nextInt(2) // 2-3 个邻近基站&#10;&#10;        try {&#10;            val neighboringCellInfoClass = XposedHelpers.findClass(&quot;android.telephony.NeighboringCellInfo&quot;, null)&#10;&#10;            for (i in 1..numCells) {&#10;                val constructor = neighboringCellInfoClass.getConstructor(&#10;                    Int::class.javaPrimitiveType,&#10;                    Int::class.javaPrimitiveType&#10;                )&#10;                val rssi = -110 + random.nextInt(30) // 信号强度&#10;                val cid = random.nextInt(65535) // Cell ID&#10;                val neighboringCell = constructor.newInstance(rssi, cid)&#10;                fakeNeighboringCells.add(neighboringCell)&#10;            }&#10;        } catch (e: Throwable) {&#10;            XposedBridge.log(&quot;GpsHook: Failed to create fake NeighboringCellInfo.&quot;)&#10;            XposedBridge.log(e)&#10;        }&#10;&#10;        return fakeNeighboringCells&#10;    }&#10;&#10;    /**&#10;     * 创建一个虚假的 Location 对象&#10;     */&#10;    private fun createFakeLocation(locationManager: LocationManager): Location {&#10;        val context = getContextFromLocationManager(locationManager)&#10;        val coords = getUserSettings(context)&#10;&#10;        val location = Location(LocationManager.GPS_PROVIDER)&#10;        location.latitude = coords.first&#10;        location.longitude = coords.second&#10;        location.accuracy = 10.0f // 精度（米）&#10;        location.altitude = 50.0 // 海拔（米）&#10;        location.bearing = 0f // 方向&#10;        location.speed = 0f // 速度（米/秒）&#10;        location.time = System.currentTimeMillis()&#10;        // for API 17+&#10;        location.elapsedRealtimeNanos = SystemClock.elapsedRealtimeNanos()&#10;        return location&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>